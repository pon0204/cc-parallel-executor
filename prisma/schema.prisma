// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// プロジェクト
model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  workdir     String   // CC起動ディレクトリ
  status      String   @default("active") // active, inactive, completed
  configJson  String?  // JSON形式の設定
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tasks        Task[]
  requirements Requirement[]
  features     Feature[]

  @@index([status])
  @@index([createdAt])
}

// タスク
model Task {
  id             String    @id @default(cuid())
  projectId      String
  parentTaskId   String?
  name           String
  description    String?
  status         String    @default("pending") // pending, queued, running, completed, failed
  priority       Int       @default(5) // 1-10
  assignedTo     String?   // CCインスタンスID
  taskType       String    // development, test, documentation
  inputData      String?   // JSON
  outputData     String?   // JSON
  instruction    String?   // ultrathinkプロトコルの指示内容
  worktreePath   String?   // Git worktreeパス
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  startedAt      DateTime?
  completedAt    DateTime?

  // Relations
  project      Project       @relation(fields: [projectId], references: [id])
  parentTask   Task?         @relation("TaskHierarchy", fields: [parentTaskId], references: [id])
  childTasks   Task[]        @relation("TaskHierarchy")
  logs         TaskLog[]
  dependencies TaskDependency[] @relation("DependentTask")
  dependents   TaskDependency[] @relation("DependsOnTask")

  @@index([projectId])
  @@index([parentTaskId])
  @@index([status])
  @@index([assignedTo])
  @@index([priority])
}

// タスク依存関係
model TaskDependency {
  id              String   @id @default(cuid())
  dependentTaskId String   // 依存する側のタスク
  dependsOnTaskId String   // 依存される側のタスク
  createdAt       DateTime @default(now())

  dependentTask Task @relation("DependentTask", fields: [dependentTaskId], references: [id])
  dependsOnTask Task @relation("DependsOnTask", fields: [dependsOnTaskId], references: [id])

  @@unique([dependentTaskId, dependsOnTaskId])
  @@index([dependentTaskId])
  @@index([dependsOnTaskId])
}

// CCインスタンス
model CCInstance {
  id               String    @id @default(cuid())
  name             String
  type             String    // parent, child
  status           String    @default("idle") // idle, running, stopped, error
  worktreePath     String?   // 子CCの場合のworktreePath
  parentInstanceId String?   // 親CCインスタンスID
  processId        String?   // システムプロセスID
  socketId         String?   // Socket.IO接続ID
  createdAt        DateTime  @default(now())
  lastHeartbeat    DateTime?

  // Relations
  parentInstance CCInstance? @relation("CCHierarchy", fields: [parentInstanceId], references: [id])
  childInstances CCInstance[] @relation("CCHierarchy")
  logs           TaskLog[]

  @@index([type])
  @@index([status])
  @@index([parentInstanceId])
}

// タスクログ
model TaskLog {
  id            String   @id @default(cuid())
  taskId        String
  ccInstanceId  String
  logLevel      String   // debug, info, warn, error
  message       String
  metadata      String?  // JSON形式の追加情報
  createdAt     DateTime @default(now())

  // Relations
  task       Task       @relation(fields: [taskId], references: [id])
  ccInstance CCInstance @relation(fields: [ccInstanceId], references: [id])

  @@index([taskId])
  @@index([ccInstanceId])
  @@index([createdAt])
  @@index([logLevel])
}

// 要件定義
model Requirement {
  id        String   @id @default(cuid())
  projectId String
  type      String   // functional, non-functional
  title     String
  content   String   // Markdown形式
  priority  String   @default("medium") // high, medium, low
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id])

  @@index([projectId])
  @@index([type])
  @@index([priority])
}

// 機能要件
model Feature {
  id          String   @id @default(cuid())
  projectId   String
  name        String
  description String?
  priority    Int      @default(5) // 1-10
  status      String   @default("planned") // planned, in-progress, completed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id])

  @@index([projectId])
  @@index([status])
  @@index([priority])
}