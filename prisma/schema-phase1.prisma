// Claude Code Terminal - Phase 1 スキーマ
// シンプルな品質保証と並列実行対応
// 既存のschema.prismaへの最小限の追加

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ==================== 既存モデルへの追加 ====================

// プロジェクト管理（変更なし）
model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  workdir     String
  status      String   @default("active")
  mcpEnabled  Boolean  @default(true)   @map("mcp_enabled")
  maxParallelCc Int    @default(5)      @map("max_parallel_cc")
  ultrathinkProtocol Boolean @default(true) @map("ultrathink_protocol")
  configJson  String?  @map("config_json")
  gitRepository String? @map("git_repository")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt      @map("updated_at")
  archivedAt  DateTime? @map("archived_at")
  
  tasks       Task[]
  requirements Requirement[]
  features    Feature[]
  gitWorktrees GitWorktree[]
  executionPhases ExecutionPhase[]  // 追加

  @@map("projects")
}

// タスク管理（品質チェック結果を追加）
model Task {
  id            String    @id @default(cuid())
  projectId     String    @map("project_id")
  parentTaskId  String?   @map("parent_task_id")
  name          String
  description   String?
  status        String @default("PENDING")
  priority      Int       @default(5)
  taskType      String    @map("task_type")  // "setup", "database", "backend", "frontend", "test", "deploy"
  assignedTo    String?   @map("assigned_to")
  instruction   String?
  inputData     String?   @map("input_data")
  outputData    String?   @map("output_data")
  worktreePath  String?   @map("worktree_path")
  
  // Phase 1 追加フィールド（シンプルな品質チェック）
  lastLintResult    Boolean? @map("last_lint_result")
  lastBuildResult   Boolean? @map("last_build_result")
  lastTestResult    Boolean? @map("last_test_result")
  qualityCheckAt    DateTime? @map("quality_check_at")
  
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt      @map("updated_at")
  queuedAt      DateTime? @map("queued_at")
  startedAt     DateTime? @map("started_at")
  completedAt   DateTime? @map("completed_at")
  
  project       Project   @relation(fields: [projectId], references: [id])
  parentTask    Task?     @relation("TaskHierarchy", fields: [parentTaskId], references: [id])
  childTasks    Task[]    @relation("TaskHierarchy")
  assignedCCInstance CCInstance? @relation(fields: [assignedTo], references: [id])
  dependencies  TaskDependency[]
  dependents    TaskDependency[] @relation("DependencyTask")
  logs          TaskLog[]
  ultrathinkMessages UltrathinkMessage[]
  gitWorktrees  GitWorktree[]

  @@map("tasks")
}

// ==================== Phase 1 新規モデル ====================

// 実行フェーズ（並列実行グループ）
model ExecutionPhase {
  id             String   @id @default(cuid())
  projectId      String   @map("project_id")
  phaseNumber    Int      @map("phase_number")
  name           String   // "Setup", "Database", "Development", "Testing", "Deploy"
  status         String   @default("pending") // "pending", "running", "completed", "failed"
  
  // Phase 1 品質チェック
  qualityCheckPassed Boolean @default(false) @map("quality_check_passed")
  qualityCheckAt     DateTime? @map("quality_check_at")
  qualityCheckResult String?   @map("quality_check_result") // JSON形式の結果
  
  startedAt      DateTime? @map("started_at")
  completedAt    DateTime? @map("completed_at")
  createdAt      DateTime @default(now()) @map("created_at")
  
  project        Project  @relation(fields: [projectId], references: [id])
  
  @@map("execution_phases")
}

// ==================== 既存モデル（変更なし） ====================

// タスク依存関係
model TaskDependency {
  id               String @id @default(cuid())
  taskId           String @map("task_id")
  dependencyTaskId String @map("dependency_task_id")
  dependencyType   String @map("dependency_type")
  createdAt        DateTime @default(now()) @map("created_at")
  
  task             Task   @relation(fields: [taskId], references: [id])
  dependencyTask   Task   @relation("DependencyTask", fields: [dependencyTaskId], references: [id])

  @@map("task_dependencies")
}

// CCインスタンス管理（親子階層）
model CCInstance {
  id                String    @id @default(cuid())
  projectId         String?   @map("project_id")
  name              String
  type              String    @default("PARENT")
  status            String    @default("IDLE")
  parentInstanceId  String?   @map("parent_instance_id")
  worktreePath      String?   @map("worktree_path")
  processId         String?   @map("process_id")
  socketId          String?   @map("socket_id")
  claudeApiKeyHash  String?   @map("claude_api_key_hash")
  startupCommand    String?   @map("startup_command")
  environmentVars   String?   @map("environment_vars")
  resourceLimits    String?   @map("resource_limits")
  createdAt         DateTime  @default(now()) @map("created_at")
  startedAt         DateTime? @map("started_at")
  lastHeartbeat     DateTime? @map("last_heartbeat")
  terminatedAt      DateTime? @map("terminated_at")
  exitCode          Int?      @map("exit_code")
  
  parentInstance    CCInstance? @relation("CCHierarchy", fields: [parentInstanceId], references: [id])
  childInstances    CCInstance[] @relation("CCHierarchy")
  assignedTasks     Task[]
  logs              CCLog[]
  sentUltrathinkMessages     UltrathinkMessage[] @relation("ParentInstance")
  receivedUltrathinkMessages UltrathinkMessage[] @relation("ChildInstance")
  gitWorktrees      GitWorktree[]
  mcpMessages       MCPMessage[]

  @@map("cc_instances")
}

// MCPメッセージログ（JSON-RPC 2.0準拠）
model MCPMessage {
  id                   String    @id @default(cuid())
  ccInstanceId         String?   @map("cc_instance_id")
  messageType          String    @map("message_type")
  jsonrpcVersion       String    @default("2.0") @map("jsonrpc_version")
  method               String?
  requestId            String?   @map("request_id")
  direction            String
  payload              String
  params               String?
  result               String?
  error                String?
  processingTimeMs     Int?      @map("processing_time_ms")
  createdAt            DateTime  @default(now()) @map("created_at")
  responseReceivedAt   DateTime? @map("response_received_at")
  
  ccInstance           CCInstance? @relation(fields: [ccInstanceId], references: [id])
  toolCalls            MCPToolCall[]

  @@map("mcp_messages")
}

// MCPツール呼び出し（create_child_cc等）
model MCPToolCall {
  id              String    @id @default(cuid())
  messageId       String    @map("message_id")
  ccInstanceId    String?   @map("cc_instance_id")
  toolName        String    @map("tool_name")
  arguments       String
  status          String    @default("pending")
  startedAt       DateTime  @default(now()) @map("started_at")
  completedAt     DateTime? @map("completed_at")
  executionTimeMs Int?      @map("execution_time_ms")
  result          String?
  errorDetails    String?   @map("error_details")
  retryCount      Int       @default(0) @map("retry_count")
  
  message         MCPMessage @relation(fields: [messageId], references: [id])

  @@map("mcp_tool_calls")
}

// WebSocket通知
model WebSocketNotification {
  id             String    @id @default(cuid())
  socketId       String    @map("socket_id")
  eventType      String    @map("event_type")
  eventName      String    @map("event_name")
  payload        String
  sentAt         DateTime  @default(now()) @map("sent_at")
  deliveryStatus String    @default("sent") @map("delivery_status")
  retryCount     Int       @default(0) @map("retry_count")
  clientAck      Boolean   @default(false) @map("client_ack")

  @@map("websocket_notifications")
}

// ultrathinkプロトコル（親子CC通信）
model UltrathinkMessage {
  id                  String    @id @default(cuid())
  parentInstanceId    String    @map("parent_instance_id")
  childInstanceId     String    @map("child_instance_id")
  taskId              String    @map("task_id")
  protocolVersion     String    @default("1.0") @map("protocol_version")
  instructionType     String    @map("instruction_type")
  instructionContent  String    @map("instruction_content")
  keywordDetected     Boolean   @default(false) @map("keyword_detected")
  sentAt              DateTime  @default(now()) @map("sent_at")
  acknowledgedAt      DateTime? @map("acknowledged_at")
  responseContent     String?   @map("response_content")
  executionStartedAt  DateTime? @map("execution_started_at")
  status              String    @default("sent")
  
  parentInstance      CCInstance @relation("ParentInstance", fields: [parentInstanceId], references: [id])
  childInstance       CCInstance @relation("ChildInstance", fields: [childInstanceId], references: [id])
  task                Task       @relation(fields: [taskId], references: [id])

  @@map("ultrathink_messages")
}

// Git Worktree管理（並列実行環境）
model GitWorktree {
  id                  String    @id @default(cuid())
  projectId           String    @map("project_id")
  ccInstanceId        String    @map("cc_instance_id")
  taskId              String    @map("task_id")
  worktreeName        String    @map("worktree_name")
  worktreePath        String    @map("worktree_path")
  baseBranch          String    @map("base_branch")
  currentBranch       String?   @map("current_branch")
  gitStatus           String?   @map("git_status")
  createdAt           DateTime  @default(now()) @map("created_at")
  lastCommitHash      String?   @map("last_commit_hash")
  lastCommitAt        DateTime? @map("last_commit_at")
  cleanupScheduledAt  DateTime? @map("cleanup_scheduled_at")
  cleanupCompletedAt  DateTime? @map("cleanup_completed_at")
  
  project             Project    @relation(fields: [projectId], references: [id])
  ccInstance          CCInstance @relation(fields: [ccInstanceId], references: [id])
  task                Task       @relation(fields: [taskId], references: [id])

  @@map("git_worktrees")
}

// CCログ（詳細ログ管理）
model CCLog {
  id           String   @id @default(cuid())
  ccInstanceId String   @map("cc_instance_id")
  taskId       String?  @map("task_id")
  logLevel     String   @map("log_level")
  category     String
  message      String
  details      String?
  traceId      String?  @map("trace_id")
  spanId       String?  @map("span_id")
  createdAt    DateTime @default(now()) @map("created_at")
  
  ccInstance   CCInstance @relation(fields: [ccInstanceId], references: [id])

  @@map("cc_logs")
}

// タスクログ
model TaskLog {
  id                   String   @id @default(cuid())
  taskId               String   @map("task_id")
  ccInstanceId         String   @map("cc_instance_id")
  logLevel             String   @map("log_level")
  phase                String
  message              String
  performanceMetrics   String?  @map("performance_metrics")
  createdAt            DateTime @default(now()) @map("created_at")
  
  task                 Task     @relation(fields: [taskId], references: [id])

  @@map("task_logs")
}

// 要件定義
model Requirement {
  id          String   @id @default(cuid())
  projectId   String   @map("project_id")
  type        String
  title       String
  content     String
  priority    Int
  status      String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt      @map("updated_at")
  
  project     Project  @relation(fields: [projectId], references: [id])

  @@map("requirements")
}

// 機能管理
model Feature {
  id              String   @id @default(cuid())
  projectId       String   @map("project_id")
  name            String
  description     String?
  featureType     String   @map("feature_type")
  priority        Int
  status          String
  mcpIntegration  Boolean  @default(false) @map("mcp_integration")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt      @map("updated_at")
  
  project         Project  @relation(fields: [projectId], references: [id])

  @@map("features")
}

// ==================== Phase 1 で追加する値の定義 ====================

// TaskType の推奨値:
// - "setup": 環境構築、依存関係インストール
// - "database": DB設計、マイグレーション、スキーマ作成
// - "backend": バックエンド実装（API、ビジネスロジック）
// - "frontend": フロントエンド実装（UI、コンポーネント）
// - "test": テスト（E2E、統合テスト）
// - "deploy": デプロイ、リリース

// ExecutionPhase.status の値:
// - "pending": 未実行
// - "running": 実行中
// - "completed": 完了
// - "failed": 失敗